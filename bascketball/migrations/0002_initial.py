# Generated by Django 4.2.7 on 2024-04-11 18:43

import colorfield.fields
from django.conf import settings
import django.core.validators
from django.db import migrations, models
import django.db.models.deletion
import django.utils.timezone


class Migration(migrations.Migration):

    initial = True

    dependencies = [
        migrations.swappable_dependency(settings.AUTH_USER_MODEL),
        ('users', '0001_initial'),
        ('bascketball', '0001_initial'),
        ('generation', '0001_initial'),
    ]

    operations = [
        migrations.CreateModel(
            name='position_BASCKETBALL',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('position_name', models.CharField(max_length=55, verbose_name='позиция')),
                ('image_position', models.ImageField(blank=True, null=True, upload_to='position_BASCKETBALL/', verbose_name='картинка позиции')),
            ],
            options={
                'verbose_name': 'позиция',
                'verbose_name_plural': 'позиции',
            },
        ),
        migrations.CreateModel(
            name='solo_cup_BASCKETBALL',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.CharField(blank=True, max_length=30, null=True, verbose_name='название')),
                ('image', models.ImageField(blank=True, null=True, upload_to='cup_solo/basketball/', verbose_name='лого кубка')),
            ],
            options={
                'verbose_name': 'кубок_соло',
                'verbose_name_plural': 'кубки_соло',
            },
        ),
        migrations.CreateModel(
            name='team_BASCKETBALL',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('team_name', models.CharField(default='clown`s', max_length=30, unique=True, verbose_name='название команды')),
                ('logo', models.ImageField(blank=True, null=True, upload_to='team_BASCKETBALL/logo/', verbose_name='лого команды')),
                ('background', models.ImageField(blank=True, null=True, upload_to='team_BASCKETBALL/background/', verbose_name='фон')),
                ('status', models.CharField(blank=True, max_length=255, null=True, verbose_name='статус')),
                ('detail', models.CharField(blank=True, max_length=255, null=True, verbose_name='подробно')),
                ('date_crate', models.DateTimeField(default=django.utils.timezone.now, verbose_name='дата создания')),
                ('matches', models.IntegerField(default=0, verbose_name='кол-во матчей')),
                ('win_matches', models.IntegerField(default=0, verbose_name='кол-во побед матчи')),
                ('tournament', models.IntegerField(default=0, verbose_name='кол-во турниров')),
                ('win_tournament', models.IntegerField(default=0, verbose_name='кол-во побед турнир')),
                ('is_recognized', models.BooleanField(default=False, verbose_name='признанный игрок')),
                ('color', colorfield.fields.ColorField(default='#3749FF', image_field=None, max_length=25, samples=None, verbose_name='цвет')),
                ('cups', models.ManyToManyField(blank=True, to='bascketball.cup_bascketball', verbose_name='кубки команды')),
                ('director', models.ForeignKey(null=True, on_delete=django.db.models.deletion.PROTECT, to=settings.AUTH_USER_MODEL)),
            ],
            options={
                'verbose_name': 'команда',
                'verbose_name_plural': 'команды',
            },
        ),
        migrations.CreateModel(
            name='tournament_BASCKETBALL',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.CharField(blank=True, max_length=255, null=True, verbose_name='название турнира')),
                ('created_at', models.DateTimeField(default=django.utils.timezone.now, verbose_name='дата')),
                ('price_tournament', models.IntegerField(blank=True, null=True, verbose_name='призовой фонд')),
                ('date', models.DateField(blank=True, null=True, verbose_name='датa')),
                ('is_on', models.BooleanField(default=False, verbose_name='открыт')),
                ('teams', models.ManyToManyField(blank=True, related_name='team_DOTA_playy', to='bascketball.team_bascketball', verbose_name='команды-участники')),
                ('win_tournament', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='teaBASCKETBALLDOTA_wine21_tournament', to='bascketball.team_bascketball')),
            ],
            options={
                'verbose_name': 'турнир',
                'verbose_name_plural': 'турниры',
            },
        ),
        migrations.CreateModel(
            name='record_stat',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('rebound', models.IntegerField(default=0, verbose_name='подборы')),
                ('shot', models.IntegerField(default=0, verbose_name='броски')),
                ('point', models.IntegerField(default=0, verbose_name='очки')),
                ('shot_relize', models.IntegerField(default=0, verbose_name='броски_попадания')),
                ('passage', models.IntegerField(default=0, verbose_name='проходы')),
                ('blockshot', models.IntegerField(default=0, verbose_name='блокшоты')),
                ('match', models.ForeignKey(null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='teame1BASCKETBALLe_DOTA_onesdqw', to=settings.AUTH_USER_MODEL)),
                ('user', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='teame1BASCKETBALLe_DOTA_onedwsads', to=settings.AUTH_USER_MODEL)),
            ],
            options={
                'verbose_name': 'статистика игрока',
                'verbose_name_plural': 'статистики игроков',
            },
        ),
        migrations.CreateModel(
            name='player_BASCKETBALL',
            fields=[
                ('user', models.OneToOneField(on_delete=django.db.models.deletion.CASCADE, primary_key=True, serialize=False, to=settings.AUTH_USER_MODEL)),
                ('name', models.CharField(blank=True, max_length=30, null=True, verbose_name='имя')),
                ('created_at', models.DateTimeField(default=django.utils.timezone.now)),
                ('matches', models.IntegerField(default=0, verbose_name='кол-во матчей')),
                ('win_matches', models.IntegerField(default=0, verbose_name='кол-во побед матчи')),
                ('tournament', models.IntegerField(default=0, verbose_name='кол-во турниров')),
                ('win_tournament', models.IntegerField(default=0, verbose_name='кол-во побед турнир')),
                ('is_recognized', models.BooleanField(default=False, verbose_name='признанный игрок')),
                ('matches_in_offers', models.IntegerField(default=0, verbose_name='кол-во матчей в контракте')),
                ('number', models.IntegerField(default=1, validators=[django.core.validators.MaxValueValidator(99)], verbose_name='номер')),
                ('translit', models.CharField(blank=True, max_length=55, null=True, verbose_name='никнейм_BASCKETBALL')),
                ('cups', models.ManyToManyField(blank=True, to='bascketball.solo_cup_bascketball', verbose_name='кубки команды')),
                ('generation', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.SET_NULL, to='generation.generation')),
                ('position', models.ManyToManyField(blank=True, to='bascketball.position_bascketball')),
                ('team', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.SET_NULL, to='bascketball.team_bascketball')),
            ],
            options={
                'verbose_name': 'игрок',
                'verbose_name_plural': 'игроки',
            },
        ),
        migrations.AddField(
            model_name='offers_bascketball',
            name='generation',
            field=models.ForeignKey(null=True, on_delete=django.db.models.deletion.SET_NULL, to='generation.generation'),
        ),
        migrations.AddField(
            model_name='offers_bascketball',
            name='position',
            field=models.ManyToManyField(blank=True, to='bascketball.position_bascketball'),
        ),
        migrations.AddField(
            model_name='offers_bascketball',
            name='team',
            field=models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='bascketball.team_bascketball'),
        ),
        migrations.AddField(
            model_name='offers_bascketball',
            name='user',
            field=models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to=settings.AUTH_USER_MODEL),
        ),
        migrations.AddField(
            model_name='meeting_bascketball',
            name='team_one',
            field=models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='team_BASCKETBALL3DOTA_one', to='bascketball.team_bascketball'),
        ),
        migrations.AddField(
            model_name='meeting_bascketball',
            name='team_two',
            field=models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='team_BASCKETBALLTA123w_two', to='bascketball.team_bascketball'),
        ),
        migrations.AddField(
            model_name='meeting_bascketball',
            name='teams_structure_one',
            field=models.ManyToManyField(blank=True, related_name='team_DOTA_play_srtucture_1_DOTA', to='bascketball.player_bascketball', verbose_name='состав команды 1'),
        ),
        migrations.AddField(
            model_name='meeting_bascketball',
            name='teams_structure_two',
            field=models.ManyToManyField(blank=True, related_name='team_DOTA_play_srtucture_2_DOTA', to='bascketball.player_bascketball', verbose_name='состав команды 2'),
        ),
        migrations.AddField(
            model_name='meeting_bascketball',
            name='tournament',
            field=models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.SET_NULL, to='bascketball.tournament_bascketball'),
        ),
        migrations.AddField(
            model_name='meeting_bascketball',
            name='win_team',
            field=models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='team_BASCKETBALLTA_wi12esn', to='bascketball.team_bascketball'),
        ),
        migrations.AddField(
            model_name='match_bascketball',
            name='meeting',
            field=models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.SET_NULL, to='bascketball.meeting_bascketball'),
        ),
        migrations.AddField(
            model_name='match_bascketball',
            name='team_one',
            field=models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='teame1BASCKETBALLe_DOTA_one', to='bascketball.team_bascketball'),
        ),
        migrations.AddField(
            model_name='match_bascketball',
            name='team_two',
            field=models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='teamqeBASCKETBALL2s_DOTA_two', to='bascketball.team_bascketball'),
        ),
        migrations.AddField(
            model_name='match_bascketball',
            name='win_team',
            field=models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='team_BASCKETBALLsDOTe12qA_win', to='bascketball.team_bascketball'),
        ),
        migrations.AddField(
            model_name='application_bascketball_tournament',
            name='author',
            field=models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='direBASCKETBALLds12wswor_zxcc', to=settings.AUTH_USER_MODEL),
        ),
        migrations.AddField(
            model_name='application_bascketball_tournament',
            name='team',
            field=models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='teqwBASCKETBALLs12sam_zxcc', to='bascketball.team_bascketball'),
        ),
        migrations.AddField(
            model_name='application_bascketball_tournament',
            name='tournament',
            field=models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='fsdeaBASCKETBALLw12sedfsa', to='bascketball.tournament_bascketball'),
        ),
        migrations.AddField(
            model_name='application_bascketball_meeting',
            name='author',
            field=models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='direBASCKETBALL2313weor_z1xcc', to=settings.AUTH_USER_MODEL),
        ),
        migrations.AddField(
            model_name='application_bascketball_meeting',
            name='team_one',
            field=models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='BASCKETBALLam123we_z4xcc', to='bascketball.team_bascketball'),
        ),
        migrations.AddField(
            model_name='application_bascketball_meeting',
            name='team_two',
            field=models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='teBASCKETBALL_e12w3ztwo', to='bascketball.team_bascketball'),
        ),
    ]

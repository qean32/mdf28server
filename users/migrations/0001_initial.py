# Generated by Django 4.2.7 on 2024-03-30 09:18

import colorfield.fields
from django.conf import settings
from django.db import migrations, models
import django.db.models.deletion
import django.utils.timezone
import users.api.managers


class Migration(migrations.Migration):

    initial = True

    dependencies = [
        ('auth', '0022_remove_group_code'),
    ]

    operations = [
        migrations.CreateModel(
            name='User',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('password', models.CharField(max_length=128, verbose_name='password')),
                ('last_login', models.DateTimeField(blank=True, null=True, verbose_name='last login')),
                ('is_superuser', models.BooleanField(default=False, help_text='Designates that this user has all permissions without explicitly assigning them.', verbose_name='superuser status')),
                ('is_staff', models.BooleanField(default=False, help_text='Designates whether the user can log into this admin site.', verbose_name='staff status')),
                ('is_active', models.BooleanField(default=True, help_text='Designates whether this user should be treated as active. Unselect this instead of deleting accounts.', verbose_name='active')),
                ('date_joined', models.DateTimeField(default=django.utils.timezone.now, verbose_name='date joined')),
                ('first_name', models.CharField(blank=True, max_length=55, null=True, verbose_name='имя')),
                ('last_name', models.CharField(blank=True, max_length=55, null=True, verbose_name='фамилия')),
                ('email', models.EmailField(max_length=255, unique=True, verbose_name='почта')),
                ('username', models.CharField(blank=True, max_length=255, null=True, unique=True, verbose_name='никнейм')),
                ('ava', models.ImageField(blank=True, null=True, upload_to='users/ava/', verbose_name='аватарка')),
                ('background', models.ImageField(blank=True, null=True, upload_to='users/background/', verbose_name='фон')),
                ('status', models.CharField(blank=True, max_length=255, null=True, verbose_name='статус')),
                ('steam', models.CharField(blank=True, max_length=255, null=True, verbose_name='стим')),
                ('is_org', models.BooleanField(default=False, verbose_name='организатор')),
                ('is_admin', models.BooleanField(default=False, verbose_name='админ')),
                ('is_BAN', models.BooleanField(default=False, verbose_name='БАН')),
                ('is_have_roles', models.BooleanField(default=False, verbose_name='я добавил это потому что питон говно')),
                ('created_at', models.DateTimeField(default=django.utils.timezone.now)),
                ('groups', models.ManyToManyField(blank=True, help_text='The groups this user belongs to. A user will get all permissions granted to each of their groups.', related_name='user_set', related_query_name='user', to='auth.group', verbose_name='groups')),
            ],
            options={
                'verbose_name': 'Пользователь',
                'verbose_name_plural': 'Пользователи',
            },
            managers=[
                ('objects', users.api.managers.CustomUserManager()),
            ],
        ),
        migrations.CreateModel(
            name='role',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.CharField(max_length=55, verbose_name='роль')),
                ('color', colorfield.fields.ColorField(default='#FFFFFF', image_field=None, max_length=25, samples=None, verbose_name='цвет')),
            ],
            options={
                'verbose_name': 'роль',
                'verbose_name_plural': 'роли',
            },
        ),
        migrations.CreateModel(
            name='smail',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('image', models.ImageField(upload_to='users/smail/', verbose_name='смайлик')),
            ],
            options={
                'verbose_name': 'смайлик',
                'verbose_name_plural': 'смайлики',
            },
        ),
        migrations.CreateModel(
            name='team_sap',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('image', models.ImageField(upload_to='users/team_sap/', verbose_name='тим сап')),
            ],
            options={
                'verbose_name': 'сап тим',
                'verbose_name_plural': 'сап тим',
            },
        ),
        migrations.CreateModel(
            name='follow',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('by', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='на', to=settings.AUTH_USER_MODEL)),
                ('for_r', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='кто', to=settings.AUTH_USER_MODEL)),
            ],
        ),
        migrations.AddField(
            model_name='user',
            name='roles',
            field=models.ManyToManyField(blank=True, to='users.role'),
        ),
        migrations.AddField(
            model_name='user',
            name='smail',
            field=models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.SET_NULL, to='users.smail'),
        ),
        migrations.AddField(
            model_name='user',
            name='team_sap',
            field=models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.SET_NULL, to='users.team_sap'),
        ),
        migrations.AddField(
            model_name='user',
            name='user_permissions',
            field=models.ManyToManyField(blank=True, help_text='Specific permissions for this user.', related_name='user_set', related_query_name='user', to='auth.permission', verbose_name='user permissions'),
        ),
    ]

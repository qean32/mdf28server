# Generated by Django 4.2.7 on 2024-03-30 09:18

import colorfield.fields
from django.conf import settings
from django.db import migrations, models
import django.db.models.deletion
import django.utils.timezone


class Migration(migrations.Migration):

    initial = True

    dependencies = [
        ('dota', '0001_initial'),
        migrations.swappable_dependency(settings.AUTH_USER_MODEL),
        ('users', '0001_initial'),
    ]

    operations = [
        migrations.CreateModel(
            name='position_DOTA',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('position_name', models.CharField(max_length=55, verbose_name='позиция')),
                ('image_position', models.ImageField(blank=True, null=True, upload_to='position_DOTA/', verbose_name='картинка позиции')),
            ],
            options={
                'verbose_name': 'позиция',
                'verbose_name_plural': 'позиции',
            },
        ),
        migrations.CreateModel(
            name='rank_DOTA',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('rank_name', models.CharField(max_length=55, verbose_name='ранг')),
                ('image_rank', models.ImageField(blank=True, null=True, upload_to='rank_DOTA/', verbose_name='картинка ранга')),
            ],
            options={
                'verbose_name': 'ранг',
                'verbose_name_plural': 'ранги',
            },
        ),
        migrations.CreateModel(
            name='solo_cup_DOTA',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.CharField(blank=True, max_length=30, null=True, verbose_name='название')),
                ('image', models.ImageField(blank=True, null=True, upload_to='cup_solo/dota/', verbose_name='лого кубка')),
            ],
            options={
                'verbose_name': 'кубок_соло',
                'verbose_name_plural': 'кубки_соло',
            },
        ),
        migrations.CreateModel(
            name='team_DOTA',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('team_name', models.CharField(default='clown`s', max_length=30, unique=True, verbose_name='название команды')),
                ('logo', models.ImageField(blank=True, null=True, upload_to='team_DOTA/logo/', verbose_name='лого команды')),
                ('background', models.ImageField(blank=True, null=True, upload_to='team_DOTA/background/', verbose_name='фон')),
                ('status', models.CharField(blank=True, max_length=255, null=True, verbose_name='статус')),
                ('detail', models.CharField(blank=True, max_length=255, null=True, verbose_name='подробно')),
                ('date_crate', models.DateTimeField(default=django.utils.timezone.now, verbose_name='дата создания')),
                ('matches', models.IntegerField(default=0, verbose_name='кол-во матчей')),
                ('win_matches', models.IntegerField(default=0, verbose_name='кол-во побед матчи')),
                ('tournament', models.IntegerField(default=0, verbose_name='кол-во турниров')),
                ('win_tournament', models.IntegerField(default=0, verbose_name='кол-во побед турнир')),
                ('is_recognized', models.BooleanField(default=False, verbose_name='признанный игрок')),
                ('color', colorfield.fields.ColorField(default='#3749FF', image_field=None, max_length=25, samples=None, verbose_name='цвет')),
                ('cups', models.ManyToManyField(blank=True, to='dota.cup_dota', verbose_name='кубки команды')),
                ('director', models.ForeignKey(null=True, on_delete=django.db.models.deletion.PROTECT, to=settings.AUTH_USER_MODEL)),
            ],
            options={
                'verbose_name': 'команда',
                'verbose_name_plural': 'команды',
            },
        ),
        migrations.CreateModel(
            name='tournament_DOTA',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.CharField(blank=True, max_length=255, null=True, verbose_name='название турнира')),
                ('created_at', models.DateTimeField(default=django.utils.timezone.now, verbose_name='дата')),
                ('price_tournament', models.IntegerField(blank=True, null=True, verbose_name='призовой фонд')),
                ('date', models.DateField(blank=True, null=True, verbose_name='датa')),
                ('is_on', models.BooleanField(default=False, verbose_name='открыт')),
                ('teams', models.ManyToManyField(blank=True, related_name='team_DOTA_play', to='dota.team_dota', verbose_name='команды-участники')),
                ('win_tournament', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='team_DOTA_win_tournament', to='dota.team_dota')),
            ],
            options={
                'verbose_name': 'турнир',
                'verbose_name_plural': 'турниры',
            },
        ),
        migrations.CreateModel(
            name='player_DOTA',
            fields=[
                ('user', models.OneToOneField(on_delete=django.db.models.deletion.CASCADE, primary_key=True, serialize=False, to=settings.AUTH_USER_MODEL)),
                ('name', models.CharField(blank=True, max_length=30, null=True, verbose_name='имя')),
                ('created_at', models.DateTimeField(default=django.utils.timezone.now)),
                ('matches', models.IntegerField(default=0, verbose_name='кол-во матчей')),
                ('win_matches', models.IntegerField(default=0, verbose_name='кол-во побед матчи')),
                ('tournament', models.IntegerField(default=0, verbose_name='кол-во турниров')),
                ('win_tournament', models.IntegerField(default=0, verbose_name='кол-во побед турнир')),
                ('is_recognized', models.BooleanField(default=False, verbose_name='признанный игрок')),
                ('matches_in_offers', models.IntegerField(default=0, verbose_name='кол-во матчей в контракте')),
                ('pts', models.IntegerField(default=0, verbose_name='птс')),
                ('nickname', models.CharField(blank=True, max_length=55, null=True, verbose_name='никнейм_DOTA')),
                ('cups', models.ManyToManyField(blank=True, to='dota.solo_cup_dota', verbose_name='кубки команды')),
                ('generation', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.SET_NULL, to='dota.generation_dota')),
                ('position', models.ManyToManyField(blank=True, to='dota.position_dota')),
                ('rank', models.ForeignKey(blank=True, default=1, null=True, on_delete=django.db.models.deletion.PROTECT, to='dota.rank_dota')),
                ('team', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.SET_NULL, to='dota.team_dota')),
            ],
            options={
                'verbose_name': 'игрок',
                'verbose_name_plural': 'игроки',
            },
        ),
        migrations.AddField(
            model_name='offers_dota',
            name='generation',
            field=models.ForeignKey(null=True, on_delete=django.db.models.deletion.SET_NULL, to='dota.generation_dota'),
        ),
        migrations.AddField(
            model_name='offers_dota',
            name='position',
            field=models.ManyToManyField(blank=True, to='dota.position_dota'),
        ),
        migrations.AddField(
            model_name='offers_dota',
            name='team',
            field=models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='dota.team_dota'),
        ),
        migrations.AddField(
            model_name='offers_dota',
            name='user',
            field=models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to=settings.AUTH_USER_MODEL),
        ),
        migrations.AddField(
            model_name='meeting_dota',
            name='team_one',
            field=models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='team_DOTA_one', to='dota.team_dota'),
        ),
        migrations.AddField(
            model_name='meeting_dota',
            name='team_two',
            field=models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='team_DOTA_two', to='dota.team_dota'),
        ),
        migrations.AddField(
            model_name='meeting_dota',
            name='teams_structure_one',
            field=models.ManyToManyField(blank=True, related_name='team_DOTA_play_srtucture_1_DOTA', to='dota.player_dota', verbose_name='состав команды 1'),
        ),
        migrations.AddField(
            model_name='meeting_dota',
            name='teams_structure_two',
            field=models.ManyToManyField(blank=True, related_name='team_DOTA_play_srtucture_2_DOTA', to='dota.player_dota', verbose_name='состав команды 2'),
        ),
        migrations.AddField(
            model_name='meeting_dota',
            name='tournament',
            field=models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.SET_NULL, to='dota.tournament_dota'),
        ),
        migrations.AddField(
            model_name='meeting_dota',
            name='win_team',
            field=models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='team_DOTA_win', to='dota.team_dota'),
        ),
        migrations.AddField(
            model_name='match_dota',
            name='meeting',
            field=models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.SET_NULL, to='dota.meeting_dota'),
        ),
        migrations.AddField(
            model_name='match_dota',
            name='team_one',
            field=models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='teame12_DOTA_one', to='dota.team_dota'),
        ),
        migrations.AddField(
            model_name='match_dota',
            name='team_two',
            field=models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='teamqes_DOTA_two', to='dota.team_dota'),
        ),
        migrations.AddField(
            model_name='match_dota',
            name='win_team',
            field=models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='team_DOTe12qA_win', to='dota.team_dota'),
        ),
        migrations.AddField(
            model_name='application_dota_tournament',
            name='author',
            field=models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='director_zxcc', to=settings.AUTH_USER_MODEL),
        ),
        migrations.AddField(
            model_name='application_dota_tournament',
            name='team',
            field=models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='team_zxcc', to='dota.team_dota'),
        ),
        migrations.AddField(
            model_name='application_dota_tournament',
            name='tournament',
            field=models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='fsdeafsa', to='dota.tournament_dota'),
        ),
        migrations.AddField(
            model_name='application_dota_meeting',
            name='author',
            field=models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='director_z1xcc', to=settings.AUTH_USER_MODEL),
        ),
        migrations.AddField(
            model_name='application_dota_meeting',
            name='team_one',
            field=models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='team_z4xcc', to='dota.team_dota'),
        ),
        migrations.AddField(
            model_name='application_dota_meeting',
            name='team_two',
            field=models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='team_ztwo', to='dota.team_dota'),
        ),
    ]
